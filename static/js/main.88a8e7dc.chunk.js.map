{"version":3,"sources":["Button.tsx","RemoteSubmitButton.tsx","RemoteSubmitForm.tsx","Submit.tsx","Store.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Button_Button","_super","Button","props","_this","call","this","renderButton","_a","classes","rest","tslib_es6","react","className","classnames","root","fullWidth","index_es","prototype","render","tooltip","enterDelay","id","leaveDelay","title","src_Button","Object","styles","width","display","margin","RemoteSubmitButton_RemoteSubmitButton","RemoteSubmitButton","handleState","StateObj","fn","state","timeoutId","clearTimeout","setTimeout","setState","isError","isSuccess","undefined","resetDuration","handleClear","onSubmit","event","submitForm","renderChildren","children","submitting","pristine","invalid","submitFailed","_b","icons_index_es","leftIcon","iconSmall","size","renderClassName","variant","isErrorContained","isSuccessContained","isSubmittingContained","isErrorText","isSuccessText","bind","componentDidUpdate","prevProps","clearFormSubmitErrors","error","isClearSubmitErrors","isReset","resetForm","submitSucceeded","componentWillUnmount","formName","type","onClick","e","disabled","defaultProps","src_RemoteSubmitButton","redux","es","ownProps","getFormError","isInvalid","isPristine","hasSubmitFailed","hasSubmitSucceeded","isSubmitting","dispatch","redux_form_es","palette","shadows","spacing","flex","fontSize","&:disabled","&:hover","backgroundColor","dark","main","boxShadow","color","common","white","& svg","primary","colors","marginRight","unit","transition","renderTextField","name","label","input","meta","touched","propsAdjusted","entries","filter","key","includes","reduce","obj","val","assign","textField","Boolean","helperText","RemoteSubmitForm_RemoteSubmitForm","RemoteSubmitForm","handleClickShowPassword","showPassword","handleSubmit","Field","component","InputProps","endAdornment","position","aria-label","gutterBottom","align","info","src_RemoteSubmitForm","reduxForm","form","values","ms","Promise","resolve","sent","username","SubmissionError","_error","password","window","alert","JSON","stringify","withStyles_default","button","marginTop","marginLeft","Store_reducer","reducer","Store","devToolsExtension","themeDark","background","default","black","text","contrastText","App_App","App","store","theme","container","direction","alignItems","justify","item","xs","icon","primaryTypographyProps","src_App","flexGrow","paper","padding","textAlign","instructions","listStyleType","withTheme","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","react_dom","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.88a8e7dc.chunk.js","sourcesContent":["import { Button as MuiButton, Omit, Tooltip } from '@material-ui/core';\r\nimport { ButtonProps as MuiButtonProps } from '@material-ui/core/Button';\r\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core/styles';\r\nimport * as classNames from 'classnames';\r\nimport * as React from 'react';\r\n\r\nexport interface ButtonProps extends Omit<MuiButtonProps, 'component'> {\r\n  tooltip?: string;\r\n}\r\n\r\nconst styles = () => (createStyles({\r\n  fullWidth: {\r\n    width: '100%'\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    margin: `0px !important`\r\n  }\r\n}));\r\n\r\nexport type ButtonPropTypes = ButtonProps & WithStyles<typeof styles>;\r\n\r\nclass Button extends React.Component<ButtonPropTypes, {}> {\r\n  constructor(props: ButtonPropTypes) {\r\n    super(props);\r\n  }\r\n\r\n  public renderButton = () => {\r\n    const {\r\n      classes,\r\n      ...rest\r\n    } = this.props;\r\n    return (\r\n      <span className={classNames(classes.root, this.props.fullWidth && classes.fullWidth)}>\r\n        <MuiButton {...rest} />\r\n      </span>\r\n    );\r\n  }\r\n  public render() {\r\n    const { tooltip } = this.props;\r\n    if (tooltip) {\r\n      return (\r\n        <Tooltip\r\n          enterDelay={300}\r\n          id={tooltip}\r\n          leaveDelay={100}\r\n          title={tooltip}\r\n        >\r\n          {this.renderButton()}\r\n        </Tooltip>\r\n      );\r\n    }\r\n    return this.renderButton();\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Button);","import { CircularProgress } from '@material-ui/core';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\r\nimport { Check as IconCheck, Error as IconError, Save as IconSave } from '@material-ui/icons';\r\nimport * as classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport { connect, MapDispatchToPropsFunction, MapStateToProps } from 'react-redux';\r\nimport { compose, Dispatch } from 'redux';\r\nimport {\r\n  clearSubmitErrors,\r\n  getFormError,\r\n  hasSubmitFailed,\r\n  hasSubmitSucceeded,\r\n  isInvalid,\r\n  isPristine,\r\n  isSubmitting,\r\n  reset,\r\n  submit\r\n} from 'redux-form';\r\nimport { ButtonProps, default as Button } from './Button';\r\n\r\nexport interface RemoteSubmitButtonStateProps {\r\n  error?: any;\r\n  invalid?: boolean;\r\n  pristine?: boolean;\r\n  submitFailed?: boolean;\r\n  submitSucceeded?: boolean;\r\n  submitting: boolean;\r\n}\r\n\r\nexport interface RemoteSubmitButtonDispatchProps {\r\n  submitForm(): void;\r\n  resetForm(): void;\r\n  clearFormSubmitErrors(): void;\r\n}\r\n\r\nexport interface RemoteSubmitButtonProps extends ButtonProps {\r\n  formName: string;\r\n  isClearSubmitErrors?: boolean;\r\n  isReset?: boolean;\r\n  resetDuration?: number;\r\n}\r\n\r\nexport interface RemoteSubmitButtonState {\r\n  isError: boolean;\r\n  isSuccess: boolean;\r\n  timeoutId?: number;\r\n}\r\n\r\nconst styles = ({palette, shadows, spacing}: Theme) => (createStyles({\r\n  fullWidth: {\r\n    flex: '1 1 auto',\r\n  },\r\n  iconSmall: {\r\n    fontSize: 20,\r\n  },\r\n  isErrorContained: {\r\n    '&:disabled': {\r\n      '&:hover': {\r\n        backgroundColor: palette.error.dark,\r\n      },\r\n      backgroundColor: palette.error.main,\r\n      boxShadow: shadows[2],\r\n      color: palette.common.white,\r\n    }\r\n  },\r\n  isErrorText: {\r\n    '&:disabled': {\r\n      '&:hover': {\r\n        color: palette.error.dark\r\n      },\r\n      color: palette.error.main,\r\n    }\r\n  },\r\n  isSubmittingContained: {\r\n    '&:disabled': {\r\n      '& svg': {\r\n        color: palette.common.white\r\n      },\r\n      '&:hover': {\r\n        backgroundColor: palette.primary.dark\r\n      },\r\n      backgroundColor: palette.primary.main,\r\n      boxShadow: shadows[2]\r\n    }\r\n  },\r\n  isSuccessContained: {\r\n    '&:disabled': {\r\n      '&:hover': {\r\n        backgroundColor: green[700]\r\n      },\r\n      backgroundColor: green[500],\r\n      boxShadow: shadows[2],\r\n      color: palette.common.white\r\n    }\r\n  },\r\n  isSuccessText: {\r\n    '&:disabled': {\r\n      '&:hover': {\r\n        color: green[700]\r\n      },\r\n      color: green[500]\r\n    }\r\n  },\r\n  leftIcon: {\r\n    marginRight: spacing.unit,\r\n  },\r\n  root: {\r\n    transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\r\n  }\r\n}));\r\n\r\nexport type RemoteSubmitButtonPropTypes = RemoteSubmitButtonProps & RemoteSubmitButtonStateProps &\r\n  RemoteSubmitButtonDispatchProps & WithStyles<typeof styles>;\r\n\r\nconst mapStateToProps: MapStateToProps<RemoteSubmitButtonStateProps, RemoteSubmitButtonProps, any> =\r\n  (state: any, ownProps: RemoteSubmitButtonProps) => {\r\n    return {\r\n      error: getFormError(ownProps.formName)(state),\r\n      invalid: isInvalid(ownProps.formName)(state),\r\n      pristine: isPristine(ownProps.formName)(state),\r\n      submitFailed: hasSubmitFailed(ownProps.formName)(state),\r\n      submitSucceeded: hasSubmitSucceeded(ownProps.formName)(state),\r\n      submitting: isSubmitting(ownProps.formName)(state)\r\n    };\r\n  };\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsFunction<RemoteSubmitButtonDispatchProps, RemoteSubmitButtonProps> =\r\n  (dispatch: Dispatch, ownProps: RemoteSubmitButtonProps) => {\r\n  return {\r\n    clearFormSubmitErrors: () => {\r\n      dispatch(clearSubmitErrors(ownProps.formName));\r\n    },\r\n    resetForm: () => {\r\n      dispatch(reset(ownProps.formName));\r\n    },\r\n    submitForm: () => {\r\n      dispatch(submit(ownProps.formName));\r\n    }\r\n  };\r\n};\r\n\r\nclass RemoteSubmitButton extends React.Component<RemoteSubmitButtonPropTypes, RemoteSubmitButtonState> {\r\n  public static defaultProps = {\r\n    resetDuration: 6000\r\n  };\r\n\r\n  constructor(props: RemoteSubmitButtonPropTypes) {\r\n    super(props);\r\n\r\n    this.handleState = this.handleState.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n      isError: false,\r\n      isSuccess: false,\r\n      timeoutId: undefined\r\n    };\r\n  }\r\n\r\n  public handleState = (StateObj: any, fn?: () => void) => {\r\n    if (this.state.timeoutId) {\r\n      clearTimeout(this.state.timeoutId);\r\n    }\r\n    const timeoutId = setTimeout(() => {\r\n      clearTimeout(this.state.timeoutId);\r\n      if (fn) {\r\n        fn();\r\n      }\r\n      this.setState({\r\n        isError: false,\r\n        isSuccess: false,\r\n        timeoutId: undefined\r\n      });\r\n    },                           this.props.resetDuration);\r\n    return this.setState({\r\n      ...StateObj,\r\n      timeoutId\r\n    });\r\n  }\r\n\r\n  public handleClear = () => {\r\n    if (this.state.timeoutId) {\r\n      clearTimeout(this.state.timeoutId);\r\n    }\r\n    return this.setState({ isError: false, isSuccess: false, timeoutId: undefined });\r\n  }\r\n\r\n  public onSubmit = (event: React.FormEvent<HTMLElement>) => {\r\n    const {\r\n      submitForm\r\n    } = this.props;\r\n\r\n    submitForm();\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: RemoteSubmitButtonPropTypes) {\r\n    const {\r\n      clearFormSubmitErrors,\r\n      error,\r\n      isClearSubmitErrors,\r\n      isReset,\r\n      resetForm,\r\n      submitSucceeded,\r\n    } = this.props;\r\n    switch (true) {\r\n      case ((error !== prevProps.error && error === undefined) || (submitSucceeded !== prevProps.submitSucceeded && !submitSucceeded)): {\r\n        return this.handleClear();\r\n      }\r\n      case (submitSucceeded !== prevProps.submitSucceeded && submitSucceeded): {\r\n        return this.handleState({\r\n          isError: false,\r\n          isSuccess: true\r\n        },                      isReset ? () => resetForm() : undefined);\r\n      }\r\n      case (error !== prevProps.error && error !== undefined): {\r\n        return this.handleState({\r\n          isError: true,\r\n          isSuccess: false\r\n        },                      isClearSubmitErrors ? () => clearFormSubmitErrors() : undefined);\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  public renderChildren = () => {\r\n    const { children, classes, submitting, pristine, invalid, submitFailed } = this.props;\r\n    const { isError, isSuccess } = this.state;\r\n    if (isError || (submitFailed && !pristine && invalid)) {\r\n      return (children) ? <React.Fragment><IconError className={classNames(classes.leftIcon, classes.iconSmall)} />{children}</React.Fragment>\r\n        : <IconError />;\r\n    }\r\n    if (isSuccess) {\r\n      return (children) ? <React.Fragment><IconCheck className={classNames(classes.leftIcon, classes.iconSmall)} />{children}</React.Fragment>\r\n        : <IconCheck />;\r\n    }\r\n    if (submitting) {\r\n      return (children) ? <React.Fragment><CircularProgress size={20} className={classes.leftIcon} />{children}</React.Fragment>\r\n        : <CircularProgress size={20} />;\r\n    }\r\n    return (children) ? <React.Fragment><IconSave className={classNames(classes.leftIcon, classes.iconSmall)} />{children}</React.Fragment>\r\n      : <IconSave />;\r\n  }\r\n\r\n  public renderClassName = () => {\r\n    const { classes, variant, submitting, pristine, invalid, submitFailed } = this.props;\r\n    const { isError, isSuccess } = this.state;\r\n    if (variant === 'contained' || variant === 'fab' || variant === 'raised') {\r\n      if (isError || (submitFailed && !pristine && invalid)) { return classes.isErrorContained; }\r\n      if (isSuccess) { return classes.isSuccessContained; }\r\n      if (submitting) { return classes.isSubmittingContained; }\r\n      return null;\r\n    }\r\n    if (isError || (submitFailed && !pristine && invalid)) { return classes.isErrorText; }\r\n    if (isSuccess) { return classes.isSuccessText; }\r\n    return null;\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    const { timeoutId } = this.state;\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      children,\r\n      className,\r\n      classes,\r\n      clearFormSubmitErrors,\r\n      formName,\r\n      invalid,\r\n      isClearSubmitErrors,\r\n      isReset,\r\n      pristine,\r\n      resetDuration,\r\n      resetForm,\r\n      submitFailed,\r\n      submitForm,\r\n      submitSucceeded,\r\n      submitting,\r\n      ...rest\r\n    } = this.props;\r\n    const { isSuccess, isError } = this.state;\r\n    return (\r\n      <Button\r\n        {...rest}\r\n        type=\"button\"\r\n        onClick={e => this.onSubmit(e)}\r\n        className={classNames(\r\n          className,\r\n          classes.root,\r\n          this.props.fullWidth ? classes.fullWidth : null,\r\n          this.renderClassName()\r\n        )}\r\n        disabled={pristine || submitting || isError || isSuccess || this.props.disabled || (submitFailed && !pristine && invalid)}\r\n      >\r\n        {this.renderChildren()}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect<RemoteSubmitButtonStateProps, RemoteSubmitButtonDispatchProps, RemoteSubmitButtonProps, any>(\r\n    mapStateToProps, mapDispatchToProps\r\n  ),\r\n  withStyles(styles)\r\n)(RemoteSubmitButton);","import { IconButton, InputAdornment, Omit, TextField, Typography } from '@material-ui/core';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\r\nimport { TextFieldProps as MuiTextFieldProps } from '@material-ui/core/TextField';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport * as React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm, WrappedFieldProps } from 'redux-form';\r\nimport submit from './Submit';\r\n\r\ntype TextFieldProps = Omit<MuiTextFieldProps, 'component' | 'value'>;\r\n\r\nconst renderTextField: React.SFC<TextFieldProps & WrappedFieldProps & WithStyles<'textField'>> = ({\r\n  name,\r\n  label,\r\n  type,\r\n  classes,\r\n  input,\r\n  meta: {error, touched},\r\n  ...rest\r\n}) => {\r\n  const propsAdjusted = Object.entries(rest).filter(([key]) => ![\r\n    'add',\r\n    'anyTouched',\r\n    'asyncValidate',\r\n    'autofill',\r\n    'blur',\r\n    'change',\r\n    'clearAsyncError',\r\n    'clearFields',\r\n    'clearSubmit',\r\n    'clearSubmitErrors',\r\n    'dateFormat',\r\n    'destroy',\r\n    'expanded',\r\n    'fieldWidths',\r\n    'handleSubmit',\r\n    'info',\r\n    'initialize',\r\n    'initialized',\r\n    'initialValues',\r\n    'invalid',\r\n    'layout',\r\n    'maxChars',\r\n    'pure',\r\n    'reset',\r\n    'resetSection',\r\n    'submit',\r\n    'submitSucceeded',\r\n    'toolbarTopStyles',\r\n    'touch',\r\n    'triggerSubmit',\r\n    'untouch',\r\n    'valid'\r\n  ].includes(key))\r\n  .reduce((obj, [key, val]) => Object.assign(obj, { [key]: val }), {});\r\n\r\n  return (\r\n    <TextField\r\n      {...input}\r\n      {...propsAdjusted}\r\n      name={name}\r\n      type={type || 'text'}\r\n      label={label}\r\n      className={classes.textField}\r\n      error={Boolean(touched && error)}\r\n      helperText={touched && error}\r\n    />\r\n  );\r\n};\r\n\r\nconst style = ({palette, spacing}: Theme) => ({\r\n  button: {\r\n    margin: 12\r\n  },\r\n  error: {\r\n    color: palette.error.main,\r\n    marginTop: spacing.unit * 2\r\n  },\r\n  info: {\r\n    marginTop: spacing.unit * 2\r\n  },\r\n  textField: {\r\n    marginLeft: spacing.unit,\r\n    marginRight: spacing.unit\r\n  }\r\n});\r\n\r\nexport interface RemoteSubmitFormData {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RemoteSubmitFormState {\r\n  showPassword: boolean;\r\n}\r\n\r\ntype RemoteSubmitFormProps = InjectedFormProps<RemoteSubmitFormData> & WithStyles<typeof style>;\r\n\r\nclass RemoteSubmitForm extends React.Component<RemoteSubmitFormProps, RemoteSubmitFormState> {\r\n  constructor(props: RemoteSubmitFormProps) {\r\n    super(props);\r\n\r\n    this.handleClickShowPassword = this.handleClickShowPassword.bind(this);\r\n\r\n    this.state = {\r\n      showPassword: false\r\n    };\r\n  }\r\n\r\n  public handleClickShowPassword = () => {\r\n    this.setState(state => ({ showPassword: !state.showPassword }));\r\n  }\r\n\r\n  public render() {\r\n    const { classes, error, handleSubmit } = this.props;\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <Field\r\n          name=\"username\"\r\n          type=\"text\"\r\n          classes={classes}\r\n          component={renderTextField}\r\n          label=\"Username\"\r\n          fullWidth={true}\r\n        />\r\n        <Field\r\n          name=\"password\"\r\n          type={this.state.showPassword ? 'text' : 'password'}\r\n          classes={classes}\r\n          component={renderTextField}\r\n          label=\"Password\"\r\n          fullWidth={true}\r\n          InputProps={{\r\n            endAdornment: <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"Toggle password visibility\"\r\n                onClick={this.handleClickShowPassword}\r\n              >\r\n                {this.state.showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }}\r\n        />\r\n        {error && <Typography variant=\"headline\" gutterBottom={true} align=\"center\" className={classes.error}>{error}</Typography>}\r\n        <Typography variant=\"body2\" gutterBottom={true} align=\"center\" className={classes.info}>\r\n        No submit button in the form. The submit button below is a separate unlinked component.\r\n        </Typography>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'remoteSubmit', // a unique identifier for this form\r\n  onSubmit: submit\r\n})(withStyles(style)(RemoteSubmitForm));","import { SubmissionError } from 'redux-form';\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport default (async function submit(values: any) {\r\n  await sleep(1000); // simulate server latency\r\n  if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n    throw new SubmissionError({\r\n      _error: 'Login failed!',\r\n      username: 'User does not exist'\r\n    });\r\n  } else if (values.password !== 'redux-form') {\r\n    throw new SubmissionError({\r\n      _error: 'Login failed!',\r\n      password: 'Wrong password'\r\n    });\r\n  } else {\r\n    window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\r\n  }\r\n});","import { combineReducers, createStore } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\ndeclare var window: Window & { devToolsExtension: any };\r\n\r\nconst reducer = combineReducers({\r\n  form: formReducer\r\n});\r\n\r\nconst store = (window.devToolsExtension\r\n  ? window.devToolsExtension()(createStore)\r\n  : createStore)(reducer);\r\n\r\nexport default store;","import { CssBaseline, Grid, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport { common } from '@material-ui/core/colors';\r\nimport { createMuiTheme, createStyles, MuiThemeProvider, Theme, WithStyles, withStyles } from '@material-ui/core/styles';\r\nimport { LockOutlined, PermIdentity } from '@material-ui/icons';\r\nimport * as React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport RemoteSubmitButton from './RemoteSubmitButton';\r\nimport RemoteSubmitForm from './RemoteSubmitForm';\r\nimport store from './Store';\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst themeDark = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    background: {\r\n      default: common.white\r\n    },\r\n    common: { black: common.black },\r\n    text: { primary: common.black },\r\n    primary: {\r\n      main: '#00d2c1',\r\n      contrastText: common.white\r\n    }\r\n  }\r\n});\r\n\r\nconst styles = ({ palette, spacing }: Theme) => (createStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: palette.background.paper\r\n  },\r\n  title: {\r\n    background: palette.common.black,\r\n    color: palette.primary.contrastText,\r\n    margin: 0,\r\n    padding: spacing.unit * 2,\r\n    textAlign: 'center',\r\n  },\r\n  icon: {\r\n    color: palette.common.black\r\n  },\r\n  instructions: {\r\n    listStyleType: 'none'\r\n  },\r\n}));\r\n// tslint:enable:object-literal-sort-keys\r\n\r\nclass App extends React.Component<WithStyles<typeof styles>> {\r\n  public render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Provider store={store}>\r\n        <MuiThemeProvider theme={themeDark}>\r\n          <CssBaseline />\r\n          <Grid container={true} className={classes.root} direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n            <Grid item={true} xs={12}>\r\n              <h2 className={classes.title}>Material-UI Remote Submit Example</h2>\r\n            </Grid>\r\n            <Grid item={true} xs={12}>\r\n              <Grid container={true} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                <Grid item={true} xs={8}>\r\n                  <List component=\"nav\">\r\n                    <ListItem>\r\n                      <ListItemIcon className={classes.icon}>\r\n                        <PermIdentity />\r\n                      </ListItemIcon>\r\n                      <ListItemText primaryTypographyProps={{ variant: 'body1' }}>\r\n                        Usernames that will pass validation: `john`, `paul`, `george`, or\r\n                        `ringo`.\r\n                      </ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon className={classes.icon}>\r\n                        <LockOutlined />\r\n                      </ListItemIcon>\r\n                      <ListItemText primaryTypographyProps={{ variant: 'body1' }}>\r\n                        Valid password for all users: `redux-form`.\r\n                      </ListItemText>\r\n                    </ListItem>\r\n                  </List>\r\n                </Grid>\r\n                <Grid item={true} xs={8}>\r\n                  <RemoteSubmitForm />\r\n                </Grid>\r\n                <Grid item={true} xs={8}>\r\n                  <RemoteSubmitButton formName=\"remoteSubmit\" variant=\"contained\" isReset={true}\r\n                  isClearSubmitErrors={true} tooltip=\"Click to remotely submit the form\">\r\n                    Submit\r\n                  </RemoteSubmitButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </MuiThemeProvider>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App);","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}